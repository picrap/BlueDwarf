<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Weavisor</name>
    </assembly>
    <members>
        <member name="T:ArxOne.Weavisor.Advice.AdviceContext">
            <summary>
            Advice context base class
            </summary>
        </member>
        <member name="T:ArxOne.Weavisor.Advice.IAdviceContextTarget">
            <summary>
            Target part with advice context
            Used by introduced fields
            </summary>
        </member>
        <member name="P:ArxOne.Weavisor.Advice.IAdviceContextTarget.Target">
            <summary>
            Gets the target.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="M:ArxOne.Weavisor.Advice.AdviceContext.#ctor(ArxOne.Weavisor.Advice.AdviceValues,ArxOne.Weavisor.Advice.AdviceContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ArxOne.Weavisor.Advice.AdviceContext"/> class.
            </summary>
            <param name="adviceValues">The advice values.</param>
            <param name="nextAdviceContext">The next advice context.</param>
        </member>
        <member name="M:ArxOne.Weavisor.Advice.AdviceContext.Proceed">
            <summary>
            Proceeds to the next advice
            </summary>
        </member>
        <member name="M:ArxOne.Weavisor.Advice.AdviceContext.Invoke">
            <summary>
            Invokes the current aspect (related to this instance).
            </summary>
        </member>
        <member name="P:ArxOne.Weavisor.Advice.AdviceContext.Target">
            <summary>
            Gets or sets the target (the instance to which the advice applies).
            null for static methods
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="T:ArxOne.Weavisor.Advice.AdviceInfoContext">
            <summary>
            Base class for advice information context
            </summary>
        </member>
        <member name="P:ArxOne.Weavisor.Advice.AdviceInfoContext.Target">
            <summary>
            Gets the target.
            </summary>
            <value>
            The target.
            </value>
        </member>
        <member name="T:ArxOne.Weavisor.Advice.IInfoAdvice">
            <summary>
            Base class for Info Advices
            Info Advices are called once per distinct reflection object at assembly load
            </summary>
        </member>
        <member name="T:ArxOne.Weavisor.Advice.IMethodInfoAdvice">
            <summary>
            Advices for <see cref="T:System.Reflection.MethodInfo"/>
            </summary>
        </member>
        <member name="M:ArxOne.Weavisor.Advice.IMethodInfoAdvice.Advise(ArxOne.Weavisor.Advice.MethodInfoAdviceContext)">
            <summary>
            Invoked once per method, when assembly is loaded
            </summary>
            <param name="context">The method info advice context</param>
        </member>
        <member name="T:ArxOne.Weavisor.Advice.InnerMethodContext">
            <summary>
            Special terminal advice, which calls the final method
            </summary>
        </member>
        <member name="M:ArxOne.Weavisor.Advice.InnerMethodContext.Invoke">
            <summary>
            Invokes the current aspect (related to this instance).
            </summary>
        </member>
        <member name="T:ArxOne.Weavisor.Advice.IPropertyAdvice">
            <summary>
            Advices implementing this interface can intercept access to properties,
            in a more precise way than IMethodAdvice would.
            </summary>
        </member>
        <member name="T:ArxOne.Weavisor.Advice.IAdvice">
            <summary>
            Represents an advice; this is the base marker for all advices
            You don't have to explicitly implement this interface, since all other interfaces inherit it
            </summary>
        </member>
        <member name="M:ArxOne.Weavisor.Advice.IPropertyAdvice.Advise(ArxOne.Weavisor.Advice.PropertyAdviceContext)">
            <summary>
            Implements advice logic.
            Usually, advice must invoke context.Proceed()
            </summary>
            <param name="context">The method advice context.</param>
        </member>
        <member name="T:ArxOne.Weavisor.Advice.MethodAdviceContext">
            <summary>
            Method advice context, passed to method advisors
            </summary>
        </member>
        <member name="M:ArxOne.Weavisor.Advice.MethodAdviceContext.#ctor(ArxOne.Weavisor.Advice.IMethodAdvice,System.Reflection.MethodBase,ArxOne.Weavisor.Advice.AdviceValues,ArxOne.Weavisor.Advice.AdviceContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ArxOne.Weavisor.Advice.MethodAdviceContext"/> class.
            </summary>
            <param name="methodAdvice">The method advice.</param>
            <param name="targetMethod">The target method.</param>
            <param name="adviceValues">The call values.</param>
            <param name="nextAdviceContext">The next advice context.</param>
        </member>
        <member name="M:ArxOne.Weavisor.Advice.MethodAdviceContext.Invoke">
            <summary>
            Invokes the current aspect (related to this instance).
            </summary>
        </member>
        <member name="P:ArxOne.Weavisor.Advice.MethodAdviceContext.Parameters">
            <summary>
            Gets the parameters.
            Each parameter can be individually changed before Call.Proceed()
            </summary>
            <value>
            The parameters.
            </value>
        </member>
        <member name="P:ArxOne.Weavisor.Advice.MethodAdviceContext.HasReturnValue">
            <summary>
            Gets a value indicating whether the advised method has a return value.
            </summary>
            <value>
            <c>true</c> if this instance has return value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ArxOne.Weavisor.Advice.MethodAdviceContext.ReturnValue">
            <summary>
            Gets or sets the return value (after Call.Proceed()).
            </summary>
            <value>
            The return value.
            </value>
        </member>
        <member name="P:ArxOne.Weavisor.Advice.MethodAdviceContext.TargetMethod">
            <summary>
            Gets the target method.
            </summary>
            <value>
            The target method.
            </value>
        </member>
        <member name="T:ArxOne.Weavisor.Advice.MethodInfoAdviceContext">
            <summary>
            Info context for MethodBase
            </summary>
        </member>
        <member name="M:ArxOne.Weavisor.Advice.MethodInfoAdviceContext.#ctor(System.Reflection.MethodBase)">
            <summary>
            Initializes a new instance of the <see cref="T:ArxOne.Weavisor.Advice.MethodInfoAdviceContext"/> class.
            </summary>
            <param name="targetMethod">The target method.</param>
        </member>
        <member name="P:ArxOne.Weavisor.Advice.MethodInfoAdviceContext.TargetMethod">
            <summary>
            Gets the target method.
            </summary>
            <value>
            The target method.
            </value>
        </member>
        <member name="T:ArxOne.Weavisor.Advice.PropertyAdviceContext">
            <summary>
            Property advice context, passed to property advisors
            </summary>
        </member>
        <member name="M:ArxOne.Weavisor.Advice.PropertyAdviceContext.#ctor(ArxOne.Weavisor.Advice.IPropertyAdvice,System.Reflection.PropertyInfo,System.Boolean,ArxOne.Weavisor.Advice.AdviceValues,ArxOne.Weavisor.Advice.AdviceContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ArxOne.Weavisor.Advice.PropertyAdviceContext"/> class.
            </summary>
            <param name="propertyAdvice">The property advice.</param>
            <param name="propertyInfo">The property information.</param>
            <param name="isSetter">if set to <c>true</c> [is setter].</param>
            <param name="adviceValues">The advice values.</param>
            <param name="nextAdviceContext">The next advice context.</param>
            <exception cref="T:System.InvalidOperationException">Only properties can be advised with this interface</exception>
        </member>
        <member name="M:ArxOne.Weavisor.Advice.PropertyAdviceContext.Invoke">
            <summary>
            Invokes the current aspect (related to this instance).
            </summary>
        </member>
        <member name="P:ArxOne.Weavisor.Advice.PropertyAdviceContext.Index">
            <summary>
            Gets the index for property.
            </summary>
            <value>
            The index.
            </value>
        </member>
        <member name="P:ArxOne.Weavisor.Advice.PropertyAdviceContext.HasValue">
            <summary>
            Gets a value indicating whether the property call has a value (is a setter, actually).
            </summary>
            <value>
              <c>true</c> if this instance has value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ArxOne.Weavisor.Advice.PropertyAdviceContext.Value">
            <summary>
            Gets or sets the property value (for setters only).
            </summary>
            <value>
            The value.
            </value>
            <exception cref="T:System.InvalidOperationException">
            Method has no Value
            or
            Method has no Value
            </exception>
        </member>
        <member name="P:ArxOne.Weavisor.Advice.PropertyAdviceContext.HasReturnValue">
            <summary>
            Gets a value indicating whether the property has return value (is a getter, actually).
            </summary>
            <value>
            <c>true</c> if this instance has return value; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ArxOne.Weavisor.Advice.PropertyAdviceContext.ReturnValue">
            <summary>
            Gets or sets the return value (after Proceed()).
            </summary>
            <value>
            The return value.
            </value>
        </member>
        <member name="P:ArxOne.Weavisor.Advice.PropertyAdviceContext.IsGetter">
            <summary>
            Gets a value indicating whether this context is a getter.
            </summary>
            <value>
              <c>true</c> if this instance is getter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ArxOne.Weavisor.Advice.PropertyAdviceContext.IsSetter">
            <summary>
            Gets a value indicating whether this context is a setter.
            </summary>
            <value>
              <c>true</c> if this instance is setter; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ArxOne.Weavisor.Advice.PropertyAdviceContext.TargetProperty">
            <summary>
            Gets the target property.
            </summary>
            <value>
            The target property.
            </value>
        </member>
        <member name="T:ArxOne.Weavisor.Advice.PropertyInfoAdviceContext">
            <summary>
            Info context for MethodBase
            </summary>
        </member>
        <member name="M:ArxOne.Weavisor.Advice.PropertyInfoAdviceContext.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ArxOne.Weavisor.Advice.PropertyInfoAdviceContext"/> class.
            </summary>
            <param name="targetProperty">The target property.</param>
        </member>
        <member name="P:ArxOne.Weavisor.Advice.PropertyInfoAdviceContext.TargetProperty">
            <summary>
            Gets the target method.
            </summary>
            <value>
            The target method.
            </value>
        </member>
        <member name="T:ArxOne.Weavisor.Annotation.Priority">
            <summary>
            Marks an advice with priority.
            Advices are sorted from higher to lower (higher are processed first, lower last)
            If no priority is specified, the value is taken from DefaulLevel
            </summary>
        </member>
        <member name="F:ArxOne.Weavisor.Annotation.Priority.DefaultLevel">
            <summary>
            The default level (when Priority is not specified on the advice)
            </summary>
        </member>
        <member name="M:ArxOne.Weavisor.Annotation.Priority.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ArxOne.Weavisor.Annotation.Priority"/> class.
            Assigns a priority
            </summary>
            <param name="level">The level.</param>
        </member>
        <member name="M:ArxOne.Weavisor.Annotation.Priority.GetLevel(System.Object)">
            <summary>
            Gets priority level from the specified advice.
            </summary>
            <param name="advice">The advice.</param>
            <returns></returns>
        </member>
        <member name="P:ArxOne.Weavisor.Annotation.Priority.Level">
            <summary>
            Gets or sets the level.
            </summary>
            <value>
            The level.
            </value>
        </member>
        <member name="T:ArxOne.Weavisor.Collection.ArraySpan`1">
            <summary>
            Array span, based on inner arrary with start index and length
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
        </member>
        <member name="M:ArxOne.Weavisor.Collection.ArraySpan`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ArxOne.Weavisor.Collection.ArraySpan`1"/> class.
            </summary>
            <param name="innerList">The inner list, wrapped by the instance.</param>
            <param name="startIndex">The start index (will become 0 here).</param>
            <param name="length">The new length.</param>
            <param name="comparer">A comparer, or null to use default.</param>
        </member>
        <member name="M:ArxOne.Weavisor.Collection.ArraySpan`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:ArxOne.Weavisor.Collection.ArraySpan`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:ArxOne.Weavisor.Collection.ArraySpan`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
        </member>
        <member name="M:ArxOne.Weavisor.Collection.ArraySpan`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies to the target array.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:ArxOne.Weavisor.Collection.ArraySpan`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="P:ArxOne.Weavisor.Collection.ArraySpan`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="P:ArxOne.Weavisor.Collection.ArraySpan`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="T:ArxOne.Weavisor.Advice.IPropertyInfoAdvice">
            <summary>
            Advices for <see cref="T:System.Reflection.PropertyInfo"/>
            </summary>
        </member>
        <member name="M:ArxOne.Weavisor.Advice.IPropertyInfoAdvice.Advise(ArxOne.Weavisor.Advice.PropertyInfoAdviceContext)">
            <summary>
            Invoked once per property, when assembly is loaded
            </summary>
            <param name="context">The property info advice context</param>
        </member>
        <member name="T:ArxOne.Weavisor.Introduction.IntroducedField`1">
            <summary>
            This class allows to introduce fields in advised type
            To use it, declare instances of it in advice,
            then use the indexer to access introduced field in advised type instance
            </summary>
            <typeparam name="TFieldType">The type of the field type.</typeparam>
        </member>
        <member name="M:ArxOne.Weavisor.Introduction.IntroducedField`1.#ctor(System.Reflection.FieldInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:ArxOne.Weavisor.Introduction.IntroducedField`1"/> class.
            </summary>
            <param name="introducedField">The introduced field.</param>
        </member>
        <member name="P:ArxOne.Weavisor.Introduction.IntroducedField`1.Item(ArxOne.Weavisor.Advice.IAdviceContextTarget)">
            <summary>
            Gets or sets the <see typeparamref="TFieldType"/> with the specified context.
            </summary>
            <value>
            The <see typeparamref="TFieldType"/>.
            </value>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="T:ArxOne.Weavisor.Introduction.IntroductionRules">
            <summary>
            Introduction rules, shared between weaver and weavisor assemblies
            </summary>
        </member>
        <member name="M:ArxOne.Weavisor.Introduction.IntroductionRules.GetName(System.String,System.String,System.String)">
            <summary>
            Gets a unique name for an introduced field, related to advice and advice member name.
            </summary>
            <param name="adviceNamespace">The advice namespace.</param>
            <param name="adviceName">Name of the advice.</param>
            <param name="adviceMemberName">Name of the advice member.</param>
            <returns></returns>
        </member>
        <member name="T:ArxOne.Weavisor.Invocation">
            <summary>
            Exposes a method to start advisors chain call
            This class is public, since call from generated assembly. 
            Semantically, it is internal.
            </summary>
        </member>
        <member name="M:ArxOne.Weavisor.Invocation.ProceedAdvice(System.Object,System.Object[],System.Reflection.MethodBase,System.Reflection.MethodInfo)">
            <summary>
            Runs a method interception.
            We use a static method here, if one day we want to reuse Invocations or change mecanism,
            it will be easier from C# code
            </summary>
            <param name="target">The target.</param>
            <param name="parameters">The parameters.</param>
            <param name="methodBase">The raw method base.</param>
            <param name="innerMethod">The inner method.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ArxOne.Weavisor.Invocation.ProcessInfoAdvices(System.Reflection.Assembly)">
            <summary>
            Processes the info advices.
            </summary>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:ArxOne.Weavisor.Invocation.ProcessInfoAdvices(System.Type)">
            <summary>
            Processes the info advices.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:ArxOne.Weavisor.Invocation.ProcessMethodInfoAdvices(System.Reflection.MethodBase)">
            <summary>
            Processes the info advices for MethodInfo.
            </summary>
            <param name="methodInfo">The method information.</param>
        </member>
        <member name="M:ArxOne.Weavisor.Invocation.ProcessPropertyInfoAdvices(System.Reflection.PropertyInfo)">
            <summary>
            Processes the info advices for PropertyInfo.
            </summary>
            <param name="propertyInfo">The property information.</param>
        </member>
        <member name="M:ArxOne.Weavisor.Invocation.CreateCallContext(System.Reflection.MethodBase,System.Reflection.MethodInfo)">
            <summary>
            Creates the method call context, given a calling method and the inner method name.
            </summary>
            <param name="methodBase">The method information.</param>
            <param name="innerMethod">Name of the inner method.</param>
            <returns></returns>
        </member>
        <member name="M:ArxOne.Weavisor.Invocation.InjectIntroducedFields(ArxOne.Weavisor.Advice.IAdvice,System.Type)">
            <summary>
            Injects the introduced fields to advice.
            </summary>
            <param name="advice">The advice.</param>
            <param name="advisedType">Type of the advised.</param>
        </member>
        <member name="M:ArxOne.Weavisor.Invocation.IsIntroduction(System.Type)">
            <summary>
            Determines whether the specified member type is introduction.
            </summary>
            <param name="memberType">Type of the member.</param>
            <returns></returns>
        </member>
        <member name="M:ArxOne.Weavisor.Invocation.GetAdvices``1(System.Reflection.MemberInfo,System.Tuple{System.Reflection.PropertyInfo,System.Boolean}@)">
            <summary>
            Gets all advices available for this method.
            </summary>
            <typeparam name="TAdvice">The type of the advice.</typeparam>
            <param name="targetMethod">The target method.</param>
            <param name="relatedPropertyInfo">The related property information.</param>
            <returns></returns>
        </member>
        <member name="M:ArxOne.Weavisor.Invocation.GetAttributes``1(System.Reflection.Assembly)">
            <summary>
            Gets the advices at assembly level.
            </summary>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:ArxOne.Weavisor.Invocation.GetAttributes``1(System.Type)">
            <summary>
            Gets the advices at type level.
            </summary>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:ArxOne.Weavisor.Invocation.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            Gets the advices at method level.
            </summary>
            <param name="provider">The provider.</param>
            <returns></returns>
        </member>
        <member name="M:ArxOne.Weavisor.Invocation.GetPropertyInfo(System.Reflection.MemberInfo)">
            <summary>
            Gets the PropertyInfo, related to a method.
            </summary>
            <param name="memberInfo">The member information.</param>
            <returns>A tuple with the PropertyInfo and true is method is a setter (false for a getter)</returns>
        </member>
        <member name="T:ArxOne.Weavisor.Advice.IMethodAdvice">
            <summary>
            Advices implementing this interface work on methods.
            Can be used at assembly, type, method or property scope
            </summary>
        </member>
        <member name="M:ArxOne.Weavisor.Advice.IMethodAdvice.Advise(ArxOne.Weavisor.Advice.MethodAdviceContext)">
            <summary>
            Implements advice logic.
            Usually, advice must invoke context.Proceed()
            </summary>
            <param name="context">The method advice context.</param>
        </member>
        <member name="T:ArxOne.Weavisor.Utility.TypeExtensions">
            <summary>
            Extensions to type
            </summary>
        </member>
        <member name="M:ArxOne.Weavisor.Utility.TypeExtensions.GetSelfAndParents(System.Type)">
            <summary>
            Enumerates from type to topmost parent
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
    </members>
</doc>
